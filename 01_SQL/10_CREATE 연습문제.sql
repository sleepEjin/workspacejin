-- 실습문제 --
-- 도서관리 프로그램을 만들기 위한 테이블들 만들기 --
-- 이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석 달기

-- 1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
-- 컬럼 : PUB_NO (출판사 번호) - 기본키 (PUBLISHER_PK)
--        PUB_NAME (출판사명) - NOT NULL (PUBLISHER_NN)
--        PHONE (출판사 전화번호) - 제약조건 없음
CREATE TABLE TB_PUBLISHER (
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(50) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR(15)
    );
-- 샘플 3개 정도 생성
INSERT INTO TB_PUBLISHER
VALUES(1,'가나다','010-1111-2222');

INSERT INTO TB_PUBLISHER
VALUES(2,'마바사','010-1234-5678');

INSERT INTO TB_PUBLISHER
VALUES(3,'일이삼','010-1233-3333');

-- 2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
-- 컬럼 : BK_NO (도서번호) - 기본키 (BOOK_PK)
--        BK_TITLE (도서명) - NOT NULL (BOOK__NN_TITLE)
--        BK_AUTHOR (저자명) - NOT NULL (BOOK__NN_AUTHOR)
--        BK_PRICE (가격) - 제약조건 없음
--        BK_PUB_NO (출판사 번호) - 외래키 (BOOK_FK), TB_PUBLISHER 테이블 참조
--                                 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 옵션 지정
CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK__NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK__NN_AUTHOR NOT NULL,
    BK_PRICE VARCHAR(20),
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER ON DELETE CASCADE 
    );

DROP TABLE TB_BOOK;
-- 샘플 5개 정도 생성
INSERT INTO TB_BOOK
VALUES(1,'1번','한명','1,000','1');

INSERT INTO TB_BOOK
VALUES(2,'2번','두명','2,000','2');

INSERT INTO TB_BOOK
VALUES(3,'3번','세명','3,000','1');

INSERT INTO TB_BOOK
VALUES(4,'4번','네명','4,000','3');

INSERT INTO TB_BOOK
VALUES(5,'5번','다섯명','5,000','2');


-- 3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
-- 컬럼 : MEMBER_NO (회원번호) - 기본키 (MEMBER_PK)
--        MEMBER_ID (아이디) - 중복금지 (MEMBER_UQ_ID)
--        MEMBER_PWD (비밀번호) - NOT NULL (MEMBER_NN_PWD)
--        MEMBER_NAME (회원명) - NOT NULL (MEMBER_NN_NAME)
--        GENDER (성별) - M 또는 F로 제한 (MEMBER_CK_GEN)
--        ADDRESS (주소) - 제약조건 없음
--        PHONE (연락처) - 제약조건 없음
--        STATUS (탈퇴여부) - 기본값 N, N 또는 Y만 허용 (MEMBER_CK_STA)
--        ENROLL_DATE (가입일) - 기본값 SYSDATE, NOT NULL (MEMBER_NN_EN)
DROP TABLE TB_MEMBER;

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) CONSTRAINT MEMBER_UQ_ID UNIQUE,
    MEMBER_PWD VARCHAR2(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(30) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(20) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN('M','F')),
    ADDRESS VARCHAR2(50),
    PHONE VARCHAR(30),
    STATUS CHAR(20) DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN('N','Y')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);
-- 샘플 5개 정도 생성
INSERT INTO TB_MEMBER(MEMBER_NO,MEMBER_ID,MEMBER_PWD, MEMBER_NAME,GENDER,ADDRESS, PHONE)
VALUES(1,'USER1','PASS1','난일번','M','서울','010-1111-1111');

INSERT INTO TB_MEMBER(MEMBER_NO,MEMBER_ID,MEMBER_PWD, MEMBER_NAME,GENDER,ADDRESS, PHONE)
VALUES(2,'USER2','PASS2','난이번','F','경기','010-2222-2222');

INSERT INTO TB_MEMBER(MEMBER_NO,MEMBER_ID,MEMBER_PWD, MEMBER_NAME,GENDER,ADDRESS, PHONE)
VALUES(3,'USER3','PASS3','난삼번','M','부산','010-3333-3333');

INSERT INTO TB_MEMBER
VALUES(4,'USER4','PASS4','난사번','F','서울','010-4444-4444','Y','25/07/28');

INSERT INTO TB_MEMBER(MEMBER_NO,MEMBER_ID,MEMBER_PWD, MEMBER_NAME,GENDER,ADDRESS, PHONE)
VALUES(5,'USER5','PASS5','난오번','F','대전','010-5555-5555');

-- 4. 어떤 회원이 어떤 도서를 대여했는지에 대한 대여목록 테이블(TB_RENT)
-- 컬럼 : RENT_NO (대여번호) - 기본키 (RENT_PK)
--        RENT_MEM_NO (대여회원번호) - 외래키 (RENT_FK_MEM), TB_MEMBER 참조
--                                     부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_BOOK_NO (대여도서번호) - 외래키 (RENT_FK_BOOK), TB_BOOK 참조
--                                      부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_DATE (대여일) - 기본값 SYSDATE
CREATE TABLE TB_RENT(
        RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
        RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL,
        RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK ON DELETE SET NULL,
        RENT_DATE DATE DEFAULT SYSDATE
);
-- 샘플 3개 정도 생성
INSERT INTO TB_RENT
VALUES(1, 2, 3,'25/07/25');

INSERT INTO TB_RENT
VALUES(2, 3, 5,'25/07/28');

INSERT INTO TB_RENT(RENT_NO, RENT_MEM_NO, RENT_BOOK_NO)
VALUES(3, 4, 1);
-- 대여목록 조회
-- TB_RENT, TB_MEMBER, TB_BOOK 테이블을 JOIN하여 대여 정보를 조회

SELECT *
FROM TB_RENT
JOIN TB_BOOK ON (RENT_BOOK_NO = BK_NO)
JOIN TB_MEMBER ON(RENT_MEM_NO = MEMBER_NO)
JOIN TB_PUBLISHER ON (PUB_NO = BK_PUB_NO);
