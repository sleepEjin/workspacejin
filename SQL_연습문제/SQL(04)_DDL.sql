--1. 테이블 이름이 TB_CATEGORY, 
--컬럼은 NAME, USE_YN(기본값 Y)
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10),
    USE_YN CHAR(1) DEFAULT 'Y'
    );
    
--2. 테이블이름 TB_CLASS_TYPE
-- 컬럼 NO(PRIMARY KEY), NAME(VARCHAR2)
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10)
);

--3. TB_CATEGORY 테이블의 NAME컬럼에 PRIMARY 키 생성
ALTER TABLE TB_CATEGORY MODIFY NAME PRIMARY KEY;

--4. TB_CLASS_TYPE 테이블의 NAME 컬럼에 NULL 값이 들어가지 않도록 속성 변경
ALTER TABLE TB_CLASS_TYPE MODIFY NAME NOT NULL;

--5. 두 테이블에서 컬럼명이 NO인것은 기존 타입은 유지하면서 크기는 10으로
-- 컬럼명이 NAME인것은 마찬가지로 기존 타입을 유지하면서 크기 20으로 변경
ALTER TABLE TB_CATEGORY MODIFY NAME VARCHAR2 (20);
ALTER TABLE TB_CLASS_TYPE
    MODIFY NO VARCHAR2(10)
    MODIFY NAME VARCHAR2(20);
    
--6. 두 테이블의 NO 컬럼과 NAME 컬럼의 이름을 각각 TB_를 제외한 테이블 이름이 앞에 붙은 형태로 변경
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;

--7. TB_CATEGORY,CLASS_TYPE 테이블의 PRIMARY KEY 이름을
-- "PK + 컬럼이름으로 지정"
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN CLASS_TYPE_NO TO PK_CLASS_TYPE_NO;
ALTER TABLE TB_CATEGORY RENAME COLUMN CATEGORY_NAME TO PK_CATEGORY_NAME;

--8. 다음과 같은 INSERT문 수행
INSERT INTO TB_CATEGORY VALUES('공학','Y');
INSERT INTO TB_CATEGORY VALUES('자연과학','Y');
INSERT INTO TB_CATEGORY VALUES('의학','Y');
INSERT INTO TB_CATEGORY VALUES('예체능','Y');
INSERT INTO TB_CATEGORY VALUES('인문사회','Y');
COMMIT;

--9. TB_DEPARTMENT의 CATEGORY 컬럼이
--TB_CATEGORY 테이블의 CATEGORY_NAME 컬럼을 
--부모값으로 참조하도록 외래키 지정
ALTER TABLE TB_DEPARTMENT
ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(PK_CATEGORY_NAME);

--10. 춘 기술대학교에서 학생들의 정보만 포함되어 있는 학생일반정보 VIEW 만들기
GRANT CREATE VIEW TO C##TEST;

CREATE VIEW VW_학생일반정보
AS (SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT);

-- 11
CREATE VIEW VW_지도면담
AS (SELECT STUDENT_NAME, DEPARTMENT_NAME, PROFESSOR_NAME
    FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
    JOIN TB_PROFESSOR ON (COACH_PROFESSOR_NO = PROFESSOR_NO));
    
--12. 모든 학과의 학과별 학생 수를 확인하도록 뷰 작성
CREATE view vw_학과별학생수
as ()